# Step
stages:
  - build
  - deploy


# When using dind, it's wise to use the overlayfs driver for
# improved performance.
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_IMAGE_NAME: registry.gitlab.com/$CI_PROJECT_PATH
  DOCKER_IMAGE_URI: registry.gitlab.com/sn-curtain/sn-curtain.com:latest


# Login Registry
before_script:
  - "docker login -u $GITLAB_USERNAME -p $GITLAB_TOKEN registry.gitlab.com"


# Build Staging Image
build-staging-image:
  stage: build
  image: docker:stable
  tags:
    - docker
  services:
    - docker:dind
  only:
    - master
  script:
    # - docker build --pull --no-cache --build-arg BACKEND_URI=${BACKEND_URI_DEV} -t $DOCKER_IMAGE_NAME .docker/stag.Dockerfile
    - docker build --pull --no-cache -t staging -f .docker/stag.Dockerfile
    - docker push $DOCKER_IMAGE_NAME
  after_script:
    - docker rmi $(docker images -qa -f 'dangling=true')

# Build Production Image
build-production-image:
  stage: build
  image: docker:stable
  tags:
    - docker
  services:
    - docker:dind
  only:
    - master
  script:
    - docker build --pull --no-cache -t production -f .docker/stag.Dockerfile
    - docker push $DOCKER_IMAGE_NAME
  after_script:
    - docker rmi $(docker images -qa -f 'dangling=true')
  when: manual



# Deploy Staging
deploy-staging:
    image: $DOCKER_IMAGE_NAME/staging:latest
    stage: deploy
    tags:
      - deploy
    before_script:
      - apk add --no-cache py-pip
      - pip install docker-compose
      - docker-compose version
    script:
      - docker-compose -f .cd/frontend.stag.yml pull
      - docker-compose -f .cd/frontend.stag.yml stop
      - docker-compose -f .cd/frontend.stag.yml rm --force
      - docker-compose -f .cd/frontend.stag.yml up -d
    after_script:
      - docker rmi $(docker images -qa -f 'dangling=true')
    environment:
      name: staging
      url: http://dev.sn-curtain.com
    only:
    - master

# Deploy Production
deploy-production:
    image: $DOCKER_IMAGE_NAME/production:latest
    stage: deploy
    tags:
      - deploy
    before_script:
      - apk add --no-cache py-pip
      - pip install docker-compose
      - docker-compose version
    script:
      - docker-compose -f .cd/frontend.prod.yml pull
      - docker-compose -f .cd/frontend.prod.yml stop
      - docker-compose -f .cd/frontend.prod.yml rm --force
      - docker-compose -f .cd/frontend.prod.yml up -d
    after_script:
      - docker rmi $(docker images -qa -f 'dangling=true')
    environment:
      name: production
      url: http://sn-curtain.com
    only:
    - master
    when: manual








# # Deploy Development
# deploy-staging:
#   image: registry.gitlab.com/sn-curtain/sn-curtain.com:latest
#   stage: deploy
#   tags:
#     - deploy
#   before_script:
#     - "apk update"
#     - "apk add --no-cache py-pip rsync git openssh"
#     - "pip install --no-cache-dir docker-compose"
#     - "git submodule update --init --recursive"
#     - mkdir "${HOME}/.ssh"
#     - echo "${SSH_HOST_KEY}" > "${HOME}/.ssh/known_hosts"
#     - echo "${SSH_PRIVATE_KEY}" > "${HOME}/.ssh/id_rsa"
#     - chmod 700 "${HOME}/.ssh/id_rsa"
#     - echo "${SSH_HOST_KEY}" > "${HOME}/.ssh/known_hosts"
#     - echo "${SSH_PRIVATE_KEY}" > "${HOME}/.ssh/id_rsa"
#     - chmod 700 "${HOME}/.ssh/id_rsa"
#   script:
#     - rsync -hrvz --delete --exclude=_ -e "ssh -i ${HOME}/.ssh/id_rsa" dist "${LINUX_USERNAME}@${HOST_IP}:/home/${LINUX_USERNAME}/html/dev.sn-curtain.com"
#     # - "docker-compose -f .cd/docker-compose.staging.yml pull"
#     # - "docker-compose -f .cd/docker-compose.staging.yml stop"
#     # - "docker-compose -f .cd/docker-compose.staging.yml rm --force"
#     # - "docker-compose -f .cd/docker-compose.staging.yml up -d"
#   # after_script:
#     # - "docker rmi $(docker images -qa -f 'dangling=true')"
#   environment:
#     name: staging
#     url: "http://dev.sn-curtain.com"
#   only:
#     - master

# # Deploy Production
# deploy-production:
#   image: docker:stable
#   stage: deploy
#   tags:
#     - deploy
#   before_script:
#     - "apk update"
#     - "apk add --no-cache py-pip rsync git openssh"
#     - "pip install --no-cache-dir docker-compose"
#     - "git submodule update --init --recursive"
#     - mkdir "${HOME}/.ssh"
#     - echo "${SSH_HOST_KEY}" > "${HOME}/.ssh/known_hosts"
#     - echo "${SSH_PRIVATE_KEY}" > "${HOME}/.ssh/id_rsa"
#     - chmod 700 "${HOME}/.ssh/id_rsa"
#   script:
#     - rsync -hrvz --delete --exclude=_ -e "ssh -i ${HOME}/.ssh/id_rsa" dist "${LINUX_USERNAME}@${HOST_IP}:/home/${LINUX_USERNAME}/html/sn-curtain.com"
#   # after_script:
#   #   - "docker rmi $(docker images -qa -f 'dangling=true')"
#   environment:
#     name: production
#     url: "https://sn-curtain.com"
#   only:
#     - master
#   when: manual
